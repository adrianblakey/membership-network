/**
 * Membership business network model.
 */
namespace org.acme.membership

import org.acme.common.*

/**
 * For enrollment
 */
enum BenefitStatus {
  o ACTIVE 
  o COBRA 
}

enum Gender {
  o MALE
  o FEMALE
  o OTHER
}

enum CobraQualifyingEvent {
  o TERMINATION
  o REDUCTION_OF_HOURS
  o MEDICARE  
  o DEATH 
  o DIVORCE 
  o SEPARATION 
  o INELIGIBLE_CHILD 
  o BANKRUPTCY_OF_RETIRED_EMPLOYEE_EMPLOYER
  o LAYOFF 
  o LEAVE_OF_ABSENCE
}

enum EmploymentStatus {
  o ACTIVE_MILITARY_OVERSEAS
  o ACTIVE_MILITARY_USA
  o FULL_TIME_ACTIVE_EMPLOYEE
  o LEAVE_OF_ABSENCE
  o PART_TIME_ACTIVE_EMPLOYEE
  o RETIRED
  o TERMINATED
}

enum StudentStatus {
  o FULL_TIME 
  o NOT_A_STUDENT
  o PART_TIME 
}

enum DiagnosisCodeListQualifier {
  o ICD9
  o ICD10
}

enum TreatmentResultingFrom {
  o OCCUPATIONAL_ILLNESS
  o AUTO_ACCIDENT
  o OTHER
}

/**
 * Other coverage optionally submitted on a claim
 */
concept DentalSubmittedOtherCoverage {
  o Name nameOfPolicyHolder         // aka subscriber
  o DateTime dateOfBirth
  o Gender gender
  o String enrolleeId optional            // id of subscriber/policyholder
  o String socialSecurityNumber optional  // one of these is mandatory
  o String planOrGroupNumber
//  o PatientsRelationshipToPolicyHolder patientsRelationshipToPolicyHolder 
  o String planName
  o Address planAddress
}

/**
 * Plan or payer
 */
asset DentalPlan identified by dentalPlanId {
  o String dentalPlanId
  o String name 
  o Address address 
}

/**
 * Abstract claim supertype
 */
abstract asset DentalClaim identified by dentalClaimId {
  o String dentalClaimId
 // o DentalClaimType dentalClaimType
}

/**
 * Attached to the claim
  */
asset DentalClaimAttachment identified by dentalClaimAttachmentId {
  o String dentalClaimAttachmentId
  o Blob blob
}

/**
 * The incoming submitted claim,
 * Direct representation of a claim form containing textual information - as submitted
 */
asset SubmittedDentalClaim extends DentalClaim {
  o String predeterminationClaimId optional            // Null if the claim type is a PRED
  // Insurance company, plan information
  o String planName
  o Address planAddress
  // Other coverage
  o DentalSubmittedOtherCoverage dentalSubmittedOtherCoverage optional
  // Policyholder/subscriber information
  o Name enrolleeName
  o Address enrolleeAddress 
  o DateTime enrolleeDateOfBirth
  o Gender enrolleeGender
  o String enrolleeId                                 // ssn or plan-assigned id
  o String planOrGroupNumber                          // group identifier
  o String employerName                               // employer or group name
  // Patient information
  // o PatientsRelationshipToPolicyHolder patientsRelationshipToPolicyHolder
  o Name patientName
  o Address patientAddress
  o DateTime patientDateOfBirth
  o Gender patientGender
  o String dentistPatientId                          // patient id assigned by the dentist
  // Record of services
  --> SubmittedDentalServiceLine[] submittedDentalServiceLines 
  o BigDecimal otherFees optional
  o BigDecimal totalFees optional                    // Calculated
  o String missingTeeth optional                             // comma separated list of teeth numbers
  o DiagnosisCodeListQualifier diagnosisCodeListQualifier optional
  o String diagnosisCodeA optional
  o String diagnosisCodeB optional
  o String diagnosisCodeC optional
  o String diagnosisCodeD optional  
  o String remarks optional
  o Boolean patientGuardianSignature
  o Boolean subscriberSignature
  // Ancillary treatment
  o Integer placeOfTreatmentCode                     // 01-99, except 27-30, 35-40, 43-48, 58-59, 63-64, 66-70, 73-80, 82-98
  --> DentalClaimAttachment[] dentalClaimAttachments optional
  // Orthodontics
  o DateTime appliancePlaced optional
  o Integer monthsOfTreatment optional
  // Replacement prosthesis
  o DateTime priorPlacement optional  
  o TreatmentResultingFrom treatmentResultingFrom optional
  o DateTime dateOfAccident optional
  o String autoAccidentState optional
  // Billing provider
  o Name billingProviderName
  o Address billingProviderAddress
  o String billingProviderNpi
  o String billingProviderLicense
  o String billingProviderTin
  o String billingProviderPhoneNumber
  o String billingProviderAddlId optional  
  // Treating provider
  o Name treatingProviderName optional
  o String treatingProviderNpi
  o String treatingProviderLicense
  o Address treatingProviderAddress
  o String treatingProviderSpecialtyCode default = '122300000X'
  o String treatingProviderPhoneNumber
  o String treatingProviderAddlId optional
}

/**
 * Service line on a claim
 */
asset SubmittedDentalServiceLine identified by dentalServiceLineId {
    o String dentalServiceLineId 
    o Integer lineNumber
    o DateTime procedureDate
    o String areaOfOralCavity
    o String toothSystem
    o String toothNumberOrLetter
    o String toothSurface
    o String procedureCode
    o String diagPointer
    o Integer quantity
    o String description optional
    o BigDecimal fee
}

/**
 * The individual service lines on a claim
 */
asset AdjudicatedDentalServiceLine extends SubmittedDentalServiceLine {
  o Integer lineNumberx
  o String procedureCodex
  o Double chargeAmount
  o Double approvedAmount
  o Double allowedAmount
  o Double deniedAmount
  o Double copaymentAmount
  o Double deductibleAmount
  o Double paidAmount
}

// The adjudicated claim - as it's processed 
asset AdjudicatedDentalClaim extends DentalClaim {
//  o ClaimStatus claimStatus
  o Double amount
  --> SubmittedDentalClaim submittedDentalClaim
}

enum CommunicationMethod {
  o EMAIL
  o URL
}

concept ElectronicCommunication {
  o CommunicationMethod communicationMethod 
  o String emailAddress optional
  o String URL optional
}

/**
 * Change to an enrollment
 */
asset EnrollmentChange identified by enrollmentChangeId {
  o String enrollmentChangeId
  o Name newName optional  
  o String newSocialSecurityNumber optional
  o ElectronicCommunication[] newElectronicCommunications optional 
  o Phone[] newPhones optional 
  o Address newMemberAddress optional 
  o Period changePeriod optional // ?
  o Gender newGender optional
  // Existing member identifiers - one or more are needed to identify the member
  o String memberId optional                  // Insurance company's id 
  o Name memberName optional
  o String socialSecurityNumber optional
  o DateTime birthDate optional 
  o Gender gender optional 
  o Address address optional 
}

asset EnrollmentAdditions identified by enrollmentAdditionsId {
  o String enrollmentAdditionsId
  o EnrollmentHeader header
  --> EnrollmentAddition[] enrollmentAdditions // sort these so the subscriber goes first
}

/**
 * Enroll a subscriber - someone directly insured
 * Enroll a member - dependent of a subscriber
 */
asset EnrollmentAddition identified by enrollmentAdditionId {
  o String enrollmentAdditionId
  //o RelationshipToSubscriber relationshipToSubscriber 
  // Unique way to identify the subscriber SSN or ID or both
  // if the relationship is not SELF
  // expect a query to be run to determine this identifier first 
  //o String subscriberId optional
  //o String subscriberSocialSecurityNumber optional
  // Subscriber to add if SELF, else member to add
  o Name name
  o Gender gender optional
  o Address address
  o String socialSecurityNumber optional // is there any tax reporting we need this for?
  o DateTime dateOfBirth 
  o ElectronicCommunication[] electronicCommunications
  o Phone[] phones
  o Boolean handicapped default = false
  // Reasons for the add TODO verify these are all reasons for an add 
  // TODO COBRA is a changePeriod
  o BenefitStatus benefitStatus // todo not needed ? active|cobra
  o CobraQualifyingEvent cobraQualifyingEvent optional  //todo add?
  o EmploymentStatus employmentStatus
  o StudentStatus studentStatus

  o DateTime deathOfSubscriberOrDependent optional // todo adds?

  o DateTime educationBeginDate optional // todo for adds?
  o DateTime eligibilityEndDate optional 
  o String dateTimePeriodDescription optional
}

asset SubscriberEnrollmentAddition extends EnrollmentAddition {
  o String employeeIdNumber optional
  o DateTime employmentBeginDate optional
}

asset MemberEnrollmentAddition extends EnrollmentAddition {
//  o RelationshipToSubscriber relationshipToSubscriber 
  --> SubscriberEnrollmentAddition subscriberEnrollmentAddition
}

/**
 * Delete one or more enrollments 
 */
asset EnrollmentDeletions identified by enrollmentDeletionsId {
  o String enrollmentDeletionsId
  o EnrollmentHeader header
  --> EnrollmentDelete[] enrollmentDeletions
}

/**
 * Enrollee identifiers to delete, remove an 
 * erroneous add - todo ordering to undo a graph? members before subscriber
 */
asset EnrollmentDelete identified by enrollmentDeleteId {
  o String enrollmentDeleteId
  // At least one unique way to identify the subscriber SSN or ID or both
  // if the relationship is not SELF
  o String identifier
  o String socialSecurityNumber optional
  o Name name optional
  o DateTime dateOfBirth optional 
}

/**
 * Organizational groupings
 */
abstract asset OrganizationalEntity identified by organizationalEntityId {
  o String organizationalEntityId
  o String name
  o Address address
}

/**
 * Group
 */
asset Group extends OrganizationalEntity {
  --> Division[] divisions optional 
}

/**
 * Division
 */
asset Division extends OrganizationalEntity {
  --> Group group
}

/**
 * Needed to identify every enrollment CRUD
 */
concept EnrollmentHeader {
  // Payer identification
  o String payerNumber
  o String payerName optional
  // Sponsor or group identifier
  o String groupNumber 
  o String groupName optional 
  o String groupTaxPayerIdNumber optional // In lieu of the group number to id the group
  o String divisionNumber optional // sub group
  // Broker identification
  o String brokerNumber optional
  o String brokerName optional
  o String brokerTaxPayerIdNumber optional 
}

/**
 * Benefit package hierarchy.
 * Four levesl in the hierachy:
 * BenefitPackage
 *   Coverage
 *      Component 
 *         Details (Network Participating and Non-Par. providers)
 * Each level inherits constraints from Benefit. Constraints may be:
 *   Limits
 *   Deductibiles
 *   Copayments
 */
asset Benefit identified by benefitId {
  o String benefitId
  --> BenefitConstraint[] benefitConstraints optional // the constraints on the benefit
}

abstract asset BenefitConstraint identified by benefitConstraintsId {
  o String benefitConstraintsId
  o String description                 // description of the constraint
  o String applyTo                     // What specfic benefit this applies to 
}

asset Limit extends BenefitConstraint {
  o BigDecimal limit
} 

asset Deductible extends BenefitConstraint {
  o BigDecimal deductible 
}

asset Copayment extends BenefitConstraint {
  o BigDecimal copayment 
}

asset BenefitPackage extends Benefit {
  --> Counter[] counters          // Overall accumulation for all members with a specific benefit package
  --> Coverage[] coverages
}

enum CoverageType {
  o VISION
  o DENTAL 
  o PSYCHIATRIC
  o HEALTH
}

asset Coverage extends Benefit {
  o CoverageType coverageType
  --> BenefitPackage benefitPackage
  --> CoverageComponent[] coverageComponents
}

asset CoverageComponent extends Benefit {
  o String description
  --> Coverage coverage
  --> CoverageDetail[] coverageDetails 
}

abstract asset CoverageDetail extends Benefit {
  --> CoverageComponent converageComponent
}

asset CoverageDetailNonPar extends CoverageDetail {
}

asset CoverageDetailPar extends CoverageDetail {
}

/**
 * More work here TODO
 */
asset ServiceCode identified by serviceCodeId {
  o String serviceCodeId
}

/**
 * Counters track benefits at the following levels:
 *  Member
 *  Contract
 * Three type of counters:
 *  1. Monetary
 *  2. Units of service
 *  3. Visits
 */
abstract asset Counter identified by counterId {
  o String counterId
  o String description
  o String[] tags
}

asset MonetaryCounter extends Counter {
  o BigDecimal counter
}

asset ServiceCounter extends Counter {
  o ServiceCode ServiceCode
  o Integer counter
}

asset VisitCounter extends Counter {
  o Integer visits
}

/**
 * A payment for a claim
 */
asset Payment identified by paymentId {
    o String paymentId
    o Double amount
    --> AdjudicatedDentalClaim adjudicatedDentalClaim
    --> BillingProvider billingProvider
}

/**
 * A human provider 
 */
participant Provider identified by npi {
  o String npi
  o Name name
}

/**
 * A provider who can submit a claim and receives payment for it
 */
participant BillingProvider extends Provider {
  o String tin
  --> SubmittedDentalClaim[] submittedDentalClaims optional
  --> Payment[] payments optional 
}

/**
 * A basic person
 */
participant Person identified by personId {
  o String personId
  o Name name 
  o Address address optional
  o ElectronicCommunication[] electronicCommunications optional
  o Phone[] phones optional 
  o Gender gender
  o DateTime dateOfBirth  
  o String socialSecurityNumber optional
}

/**
 * Someone who is eligible for services by being enrolled in an insurance plan, AKA member
 */
participant Enrollee extends Person {
}

/**
 * A person who is enrolled in an insurance plan. AKA PolicyHolder
 */
participant Subscriber extends Enrollee {
  o String employer optional
  --> Dependent[] dependents optional // just named depdendents
  --> SubscriberPlan[] subscriberPlans optional 
}

/**
 * Limit counters for and enrollee in a plan (TODO is this right? 
 * plan == contract? lifetime counters?)
 */
asset EnrolleePlan identified by enrolleePlanId {
  o String enrolleePlanId
  --> Counter[] counters optional            // The accumulation of benefits
}

/**
 * Plans in which the subscriber is enrolled
 */
asset SubscriberPlan identified by subscriberPlanId {
  o String subscriberPlanId
  --> Subscriber subscriber
  --> DentalPlan dentalPlan
  o DateTime effectiveDate
  o DateTime terminationDate
  --> Dependent[] dependents // insured dependents
}

/**
 * Dependent of the Enrollee/subscriber
 */
participant Dependent extends Enrollee {
//  o RelationshipToSubscriber relationshipToSubscriber
  --> Subscriber subscriber     // For which of the subscriber's plans?
}

/**
 * Create a plan for testing
 */
transaction CreatePlan {
}

/**
 * Create a group for testing
 */
transaction CreateGroup {
}

/**
 * Create a plan subcriber - directly insured by the plan
 */
transaction CreateSubscriber {
}

transaction CreateBillingProvider {
}

transaction AdjudicateDentalClaim {
  --> SubmittedDentalClaim submittedDentalClaim
}

transaction PayDentalClaim {
  --> AdjudicatedDentalClaim adjudicatedDentalClaim
}

/**
 * Create a submitted claim
 */
transaction CreateSubmittedClaim {
}

transaction PostTransaction {
  --> SubmittedDentalClaim submittedDentalClaim
}

/**
 * Add new enrollees(s)
 * Add a new dependent, partner 
 */
transaction AddEnrollees {
  --> EnrollmentAdditions enrollmentAdditions
}

/**
 * Delete incorrect coverage record(s) - correct a mistake
 */
transaction DeleteEnrollees {
  --> EnrollmentDeletions enrollmentDeletions
}

/**
 * Change enrollee details like what?
 * Change of address
 * Change of name
 * Change to COBRA
 * Remove a dependent (student, age 26, divorce ...)
 * 
 */
transaction ChangeEnrollee {
}

/**
 * Cancel enrollee
 */
transaction CancellEnrollee {
}

/**
 * Reinstate enrollee
 */
transaction ReinstateEnrollee {
}

/**
 * Correct enrollee
 */
transaction CorrectEnrollee {
}

/**
 * Audit/compare enrollee
 */
transaction AuditEnrollee {
}

/**
 * Employee information
 */
transaction InformationEnrollee {
}

event StartAdjudicationEvent {
  --> AdjudicatedDentalClaim adjudicatedDentalClaim
  --> SubmittedDentalClaim submittedDentalClaim
}

event PayDentalClaimEvent {
  --> AdjudicatedDentalClaim adjudicatedDentalClaim
  --> Payment payment
}